name: Update Submodule Reference

on:
  repository_dispatch:
    types: [submodule-updated]

jobs:
  update-submodule:
    runs-on: ubuntu-latest
    
    steps:
      # 1️⃣ 检出仓库
      - name: Checkout EdgeOne-Pages branch
        uses: actions/checkout@v3
        with:
          ref: EdgeOne-Pages
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}
          submodules: true

      # 2️⃣ 设置 Git 用户
      - name: Set up Git
        run: |
          git config user.name "shimoxijimu-actions"
          git config user.email "shimoxijimu@users.noreply.github.com"

      # 3️⃣ 更新子模块引用
      - name: Update submodule reference
        run: |
          # 检查是否有 PERSONAL_TOKEN
          if [[ -z "${{ secrets.PERSONAL_TOKEN }}" ]]; then
            echo "Warning: PERSONAL_TOKEN not found. Please set PERSONAL_TOKEN in repository secrets to enable deployment."
            echo "Skipping deployment..."
            exit 0
          fi
          
          echo "Updating submodule reference..."
          SUBMODULE_PATH="${{ github.event.client_payload.submodule }}"
          TARGET_BRANCH="${{ github.event.client_payload.branch }}"
          
          echo "Submodule: $SUBMODULE_PATH"
          echo "Target branch: $TARGET_BRANCH"
          
          # 显示当前状态
          echo "Current directory contents:"
          ls -la
          echo "Git status:"
          git status
          echo "Submodule status:"
          git submodule status || echo "No submodules found"
          
          # 检查 .gitmodules 文件
          if [[ -f ".gitmodules" ]]; then
            echo ".gitmodules content:"
            cat .gitmodules
          else
            echo "No .gitmodules file found"
          fi
          
          # 初始化子模块（如果需要）
          if [[ -f ".gitmodules" ]]; then
            echo "Initializing submodules..."
            git submodule update --init --recursive
          fi
          
          # 检查子模块目录是否存在
          if [[ -d "$SUBMODULE_PATH" ]]; then
            echo "Submodule directory found: $SUBMODULE_PATH"
            
            # 进入子模块目录
            cd "$SUBMODULE_PATH"
            echo "Current submodule branch: $(git branch --show-current)"
            echo "Available remote branches:"
            git branch -r
            
            # 获取最新的远程分支信息
            git fetch origin
            
            # 切换到目标分支
            if git ls-remote --exit-code --heads origin "$TARGET_BRANCH" >/dev/null 2>&1; then
              echo "Switching to $TARGET_BRANCH branch..."
              git checkout "$TARGET_BRANCH" || git checkout -b "$TARGET_BRANCH" "origin/$TARGET_BRANCH"
              git pull origin "$TARGET_BRANCH"
              echo "Successfully updated to $TARGET_BRANCH"
            else
              echo "Target branch $TARGET_BRANCH not found in remote"
            fi
            
            cd ..
            
            # 检查子模块引用是否有变化
            echo "Checking for submodule changes..."
            git status --porcelain
            
            if git diff --cached --quiet && git diff --quiet; then
              echo "No changes to commit."
            else
              echo "Changes detected, committing..."
              git add .
              git commit -m "Update $SUBMODULE_PATH to latest $TARGET_BRANCH"
              
              # 推送更新，处理并发冲突
              echo "Pushing changes..."
              if ! git push https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }} EdgeOne-Pages; then
                echo "Push failed, trying to rebase and retry..."
                git pull --rebase https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }} EdgeOne-Pages
                git push https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }} EdgeOne-Pages
              fi
              echo "✅ Submodule reference updated successfully."
            fi
          else
            echo "❌ Submodule directory $SUBMODULE_PATH not found."
            echo "Available directories:"
            find . -maxdepth 2 -type d -name "*volantis*" || echo "No volantis directories found"
          fi