name: Sync Main to EdgeOne-Pages

on:
  push:
    branches: [main]

jobs:
  sync-to-edgeone:
    runs-on: ubuntu-latest
    
    steps:
      # 1️⃣ 检出 main 分支
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}

      # 2️⃣ 获取最新提交信息
      - name: Get latest commit info
        id: commit_info
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_ID=$(git log -1 --pretty=format:"%h")
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "commit_id=$COMMIT_ID" >> $GITHUB_OUTPUT
          echo "Latest commit: $COMMIT_MESSAGE ($COMMIT_ID)"

      # 3️⃣ 设置 Git 用户
      - name: Set up Git
        run: |
          git config user.name "shimoxijimu-actions"
          git config user.email "shimoxijimu@users.noreply.github.com"

      # 4️⃣ 强制同步到 EdgeOne-Pages 分支
      - name: Force sync to EdgeOne-Pages branch
        run: |
          # 检查是否有 PERSONAL_TOKEN
          if [[ -z "${{ secrets.PERSONAL_TOKEN }}" ]]; then
            echo "Warning: PERSONAL_TOKEN not found. Please set PERSONAL_TOKEN in repository secrets to enable deployment."
            echo "Skipping deployment..."
            exit 0
          fi
          
          echo "🔄 强制同步 → 直接将 EdgeOne-Pages 分支重置为 main 分支的完全副本"
          
          # 直接重置 EdgeOne-Pages 分支为 main 分支的完全副本
          git checkout -B EdgeOne-Pages origin/main
          echo "✅ EdgeOne-Pages 分支已重置为 main 分支的完全副本"
          
          # 5️⃣ 复制部署文件 → 将 deploy/ 目录的文件复制到根目录
          echo "📁 复制部署文件 → 将 deploy/ 目录的文件复制到根目录"
          if [[ -d "deploy" ]]; then
            echo "Deploy 文件夹找到，开始复制内容..."
            
            # 显示 deploy 文件夹内容
            echo "Deploy 文件夹内容:"
            ls -la deploy/
            
            # 复制所有文件和文件夹，覆盖现有文件
            cp -rf deploy/* ./
            cp -rf deploy/.* ./ 2>/dev/null || true  # 复制隐藏文件，忽略错误
            
            echo "✅ 文件复制成功"
            echo "根目录内容 (复制后):"
            ls -la
            
            # 6️⃣ 更新子模块配置 → 确保子模块指向正确的分支
            echo "🔧 更新子模块配置 → 确保子模块指向正确的分支"
            if [[ -f ".gitmodules" ]]; then
              echo "找到 .gitmodules 文件，检查子模块配置..."
              cat .gitmodules
              
              # 初始化并更新子模块到正确的分支
              echo "初始化子模块..."
              git submodule init
              
              echo "同步子模块 URL..."
              git submodule sync
              
              echo "更新子模块到指定分支..."
              git submodule update --remote --recursive
              
              echo "✅ 子模块更新完成"
              echo "子模块状态:"
              git submodule status
            else
              echo "⚠️ 未找到 .gitmodules 文件"
            fi
            
            # 添加所有更改（包括子模块更改）
            git add .
            
            # 提交更改
            echo "提交更改..."
            git commit -m "${{ steps.commit_info.outputs.commit_message }} (${{ steps.commit_info.outputs.commit_id }})" || echo "没有需要提交的更改"
            
            # 7️⃣ 强制推送 → 强制推送所有变更，覆盖远程分支历史
            echo "🚀 强制推送 → 强制推送所有变更，覆盖远程分支历史"
            git push --force https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }} EdgeOne-Pages
            echo "✅ 成功强制同步 main 到 EdgeOne-Pages 并复制部署文件"
          else
            echo "⚠️ Deploy 文件夹未找到，仅同步 main 分支内容"
            
            # 直接强制推送重置后的分支
            echo "🚀 强制推送 → 推送重置后的分支"
            git push --force https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }} EdgeOne-Pages
            echo "✅ 成功强制同步 main 到 EdgeOne-Pages"
          fi