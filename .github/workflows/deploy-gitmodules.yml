name: Sync Main Branch Changes to EdgeOne-Pages

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 检出仓库
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}

      # 2️⃣ 设置 Git 用户
      - name: Set up Git
        run: |
          git config user.name "shimoxijimu-actions"
          git config user.email "shimoxijimu@users.noreply.github.com"

      # 3️⃣ 同步 main 分支的所有变化到 EdgeOne-Pages
      - name: Sync all changes from main to EdgeOne-Pages
        run: |
          # 检查是否有 PERSONAL_TOKEN
          if [[ -z "${{ secrets.PERSONAL_TOKEN }}" ]]; then
            echo "Warning: PERSONAL_TOKEN not found. Please set PERSONAL_TOKEN in repository secrets to enable deployment."
            echo "Skipping deployment..."
            exit 0
          fi
          
          echo "Starting sync process..."
          BRANCH="EdgeOne-Pages"

          # 获取当前提交的变更文件列表
          echo "Getting changed files from this push..."
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # 确保关键配置文件总是被同步
          ESSENTIAL_FILES="package.json pnpm-workspace.yaml"
          for essential_file in $ESSENTIAL_FILES; do
            if [[ -f "$essential_file" ]]; then
              if ! echo "$CHANGED_FILES" | grep -q "^$essential_file$"; then
                echo "Adding essential file: $essential_file"
                CHANGED_FILES="$CHANGED_FILES"$'\n'"$essential_file"
              fi
            fi
          done

          # 检查远程分支是否存在
          if git ls-remote --exit-code --heads origin $BRANCH >/dev/null 2>&1; then
            echo "Remote branch $BRANCH exists, fetching..."
            git fetch origin $BRANCH
            git checkout -B $BRANCH origin/$BRANCH
          else
            echo "Remote branch $BRANCH does not exist, creating new branch..."
            git checkout -b $BRANCH
          fi

          echo "Current branch: $(git branch --show-current)"

          # 切换回 main 分支获取最新文件
          git checkout main

          # 同步变更的文件
          CHANGES_MADE=false
          
          while IFS= read -r file; do
            if [[ -n "$file" && -f "$file" ]]; then
              echo "Processing changed file: $file"
              
              # 切换到目标分支
              git checkout $BRANCH
              
              # 创建目标目录（如果需要）
              target_dir=$(dirname "$file")
              if [[ "$target_dir" != "." ]]; then
                mkdir -p "$target_dir"
              fi
              
              # 从 main 分支复制文件
              git checkout main -- "$file"
              
              # 检查文件是否真的有变化
              if git diff --quiet HEAD "$file" 2>/dev/null; then
                echo "$file unchanged."
              else
                echo "Adding $file to staging..."
                git add "$file"
                CHANGES_MADE=true
              fi
            fi
          done <<< "$CHANGED_FILES"

          # 切换回目标分支进行提交
          git checkout $BRANCH

          # 额外步骤：将 deploy 目录下的文件复制到根目录
          echo "Copying files from deploy/ directory to root..."
          DEPLOY_DIR="deploy"
          
          # 检查当前暂存区状态
          echo "Current staging area before deploy files:"
          git status --porcelain
          
          if git ls-tree main:"$DEPLOY_DIR" >/dev/null 2>&1; then
            echo "Deploy directory found in main branch, processing files..."
            
            # 获取 deploy 目录中的文件列表（不切换分支）
            DEPLOY_FILES=$(git ls-tree --name-only main:"$DEPLOY_DIR" 2>/dev/null || echo "")
            
            for filename in $DEPLOY_FILES; do
              echo "Processing deploy file: $filename"
              
              # 从 main 分支复制 deploy 文件到根目录
              if git show main:"$DEPLOY_DIR/$filename" > "$filename" 2>/dev/null; then
                echo "Successfully copied $filename from main:$DEPLOY_DIR/$filename"
                
                # 检查文件是否有变化
                if git diff --quiet HEAD "$filename" 2>/dev/null; then
                  echo "Deploy file $filename unchanged."
                else
                  echo "Adding deploy file $filename to staging..."
                  git add "$filename"
                  CHANGES_MADE=true
                fi
              else
                echo "Failed to get $DEPLOY_DIR/$filename from main branch"
              fi
            done
          else
            echo "Deploy directory not found in main branch, skipping deploy files copy."
          fi
          
          # 检查最终暂存区状态
          echo "Current staging area after deploy files:"
          git status --porcelain

          # 确保最后在目标分支上
          git checkout $BRANCH

          # 提交并推送变化
          echo "Final branch check: $(git branch --show-current)"
          echo "Final staging area status:"
          STAGED_FILES=$(git status --porcelain)
          echo "$STAGED_FILES"
          
          # 检查是否真的有文件需要提交
          if [[ -n "$STAGED_FILES" ]] || [[ "$CHANGES_MADE" == true ]]; then
            # 获取原始提交信息
            ORIGINAL_COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.sha }})
            COMMIT_ID=$(echo ${{ github.sha }} | cut -c1-7)
            
            echo "Committing changes..."
            if git commit -m "${ORIGINAL_COMMIT_MSG} (${COMMIT_ID})"; then
              # 尝试推送，如果失败则强制推送
              echo "Pushing to remote..."
              if ! git push https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }} $BRANCH; then
                echo "Normal push failed, trying force push..."
                git push --force https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }} $BRANCH
              fi
              
              echo "✅ Changes committed and pushed to $BRANCH branch successfully."
            else
              echo "❌ Commit failed - no changes to commit or commit error"
            fi
          else
            echo "ℹ️ No changes to commit."
          fi
          
          echo "🎉 Sync process completed!"
